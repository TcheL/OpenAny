#!/bin/bash
#===============================================================================
# opan: open an any-type file on Linux system.
#
#     Author: Tche LIU        Email: seistche@gmail.com
#     Copyright (C) Tche LIU, 2017. All Rights Reserved.
#===============================================================================

# file-open tools defination.
explorer=xdg-open
editor=vim
ncdump=ncdump
mdview=typora
pdfview=evince
picview=eog
tartool=tar

# function to print help information.
function print_help_info() {
  printf '\nUsage:  opan [-h] | [ file [options] ]\n'
  printf '  [-h     ]: print this help information.\n'
  printf '  [file   ]: name of the file to open.\n'
  printf '  [options]: options to pass to the invoked file-open tool.\n\n'
  exit $1
}

#====================== handle with command line arguments =====================
# if no argument:
if [ "$*" == '' ]; then
  $explorer `pwd`
  printf ">> $explorer ./\n"
  exit 0
fi

# if want to print help info:
if [ "$1" == '-h' -o "$1" == '--help' ]; then
  print_help_info 0
fi

# get file type:
if [ -d "$1" ]; then
  tool=$explorer
elif [ -f "$1" ]; then
  file=${1##*/}
  pref=${file%.*}
  suff=${file##*.}
  case $suff in
    'txt' | 'log' | 'conf' | 'dat' | 'inc' | 'cpt')
      tool=$editor ;;
    'c' | 'cpp' | 'h')
      tool=$editor ;;
    'f' | 'for' | 'f90' | 'F' | 'FOR' | 'F90')
      tool=$editor ;;
    'cu')
      tool=$editor ;;
    'm' | 'py')
      tool=$editor ;;
    'sh' | 'bat')
      tool=$editor ;;
    'tex' | 'sty')
      tool=$editor ;;
    'pbs' | 'lsf')
      tool=$editor ;;
    'json')
      tool=$editor ;;
    'yml')
      tool=$editor ;;
    'html')
      tool=$editor ;;
    'pdf' | 'eps' | 'ps')
      tool=$pdfview ;;
    'png' | 'jpg' | 'gif' | 'tif')
      tool=$picview ;;
    'tar' | 'tgz' | 'gz' | 'bz2')
      tool=$tartool ;;
    'md')
      tool=$mdview ;;
    'nc')
      tool=$ncdump ;;
    *)
      if [ "$suff" == "$file" ]; then
        # if no dot in the filename:
        tool=$editor 
      elif [ -z "$pref" ]; then
        # for hidden files:
        tool=$editor 
      else
        printf "Error at `pwd`:\n"
        printf "  $suff: I do know this file-type.\n"
        exit 1
     fi
   esac
else
  printf "Error at `pwd`:\n"
  printf "  $1: No such file or directory.\n"
  exit 2
fi

# pass other arguments:
ops="${@:2}"

# test file readability:
if [ ! -r "$1" ]; then
  printf "Error at `pwd`:\n"
  printf "  $1: Not readable for me.\n"
  exit 3
else
  if [ "$ops" ]; then
    printf ">> $tool $ops $1\n"
    $tool $ops "$1"
  else
    printf ">> $tool $1\n"
    $tool "$1"
  fi
fi

